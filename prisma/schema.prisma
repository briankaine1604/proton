// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  subtitle    String?
  coverImage  String
  content     String      @db.LongText
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  published   Boolean     @default(false)
  slug        String      @unique
  categories  BlogPostCategory[]
}

model Category {
  id          String            @id @default(cuid())
  name        String
  posts       BlogPostCategory[]
}

model BlogPostCategory {
  id          Int               @id @default(autoincrement())
  blogPostId  String
  categoryId  String
  blogPost    BlogPost           @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  category    Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, categoryId])
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  attachment String?
  createdAt DateTime @default(now())
  status    Status    @default(PENDING)
  reviewers ReviewedBy[]
}

model ReviewedBy {
  id            String      @id @default(cuid())
  userId        String
  contactFormId String
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactForm   ContactForm @relation(fields: [contactFormId], references: [id], onDelete: Cascade)
  @@unique([userId, contactFormId])
}



enum Status {
  PENDING
  REVIEWED
  RESPONDED
}




model TeamMember{
  id          String   @id @default(cuid())
  name         String
  bio          String?     @db.Text
  image       String
  role String
   createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

}

model Project {
  id          String   @id @default(cuid())
  address String? @db.Text
  name         String
  description  String      @db.Text
  price        Decimal?     @db.Decimal(14, 2)
  images       Image[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  inStock      Boolean     @default(true)
   slug        String   @unique
 
}

model ExternalLinks{
   id          String   @id @default(cuid())
   link String
    createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Newsletter{
  id          String   @id @default(cuid())
  name String
  newsletterId String
  content String @db.LongText
  status String
  scheduledTime DateTime?
   createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  project   Project @relation(fields: [projectId], references: [id],onDelete: Cascade)
  projectId String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  reviews   ReviewedBy[]
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime


  @@unique([email,token])
}

model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model twoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation{
id String @id @default(cuid())
userId String
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@unique([userId])
}