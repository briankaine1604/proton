generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id         String             @id @default(cuid())
  title      String
  subtitle   String?
  coverImage String
  content    String             @db.LongText
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  published  Boolean            @default(false)
  slug       String             @unique
  categories BlogPostCategory[]
}

model Category {
  id    String             @id @default(cuid())
  name  String
  posts BlogPostCategory[]
}

model BlogPostCategory {
  id         Int      @id @default(autoincrement())
  blogPostId String
  categoryId String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, categoryId])
  @@index([categoryId], map: "BlogPostCategory_categoryId_fkey")
}

model ContactForm {
  id         String       @id @default(cuid())
  name       String
  email      String
  phone      String?
  message    String
  attachment String?
  createdAt  DateTime     @default(now())
  status     Status       @default(PENDING)
  reviewers  ReviewedBy[]
}

model ReviewedBy {
  id            String      @id @default(cuid())
  userId        String
  contactFormId String
  createdAt     DateTime    @default(now())
  contactForm   ContactForm @relation(fields: [contactFormId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contactFormId])
  @@index([contactFormId], map: "ReviewedBy_contactFormId_fkey")
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  bio       String?  @db.Text
  image     String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  address     String?  @db.Text
  name        String
  description String   @db.Text
  price       Decimal? @db.Decimal(14, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inStock     Boolean  @default(true)
  slug        String   @unique
  images      Image[]
}

model ExternalLinks {
  id        String   @id @default(cuid())
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  link      String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id            String    @id @default(cuid())
  name          String
  newsletterId  String
  content       String    @db.LongText
  status        String
  scheduledTime DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Image {
  id        String  @id @default(cuid())
  url       String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "Image_projectId_fkey")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  reviews               ReviewedBy[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model twoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  STAFF
}

enum Status {
  PENDING
  REVIEWED
  RESPONDED
}
